services:
  # MySQL Database Service
  mysql:
    image: mysql:8.0
    container_name: welcomer-mysql
    volumes:
      - mysql-data:/var/lib/mysql
      - ./init-scripts/mysql:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_HOST=%
    ports:
      - "3306:3306"
    networks:
      - welcomer-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # MongoDB Service for document storage
  mongodb:
    image: mongo:7.0
    container_name: welcomer-mongodb
    volumes:
      - mongodb-data:/data/db
      - ./init-scripts/mongodb:/docker-entrypoint-initdb.d
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    ports:
      - "27017:27017"
    networks:
      - welcomer-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis Service for caching
  redis:
    image: redis:7-alpine
    container_name: welcomer-redis
    volumes:
      - redis-data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    networks:
      - welcomer-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Zookeeper Service (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:${ZOOKEEPER_VERSION}
    container_name: welcomer-zookeeper
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "2181:2181"
    networks:
      - welcomer-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Kafka Service for event streaming
  kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    container_name: welcomer-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    volumes:
      - kafka-data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      # Performance and memory settings
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 67108864
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - welcomer-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:29092"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Elasticsearch Service for search functionality
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: welcomer-elasticsearch
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - ./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      - node.name=welcomer-es-node
      - cluster.name=welcomer-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - welcomer-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Spring Boot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: welcomer-app
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./docker-application.properties:/app/config/application.properties
    environment:
      # Database configuration
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/${MYSQL_DATABASE}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=${MYSQL_USER}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver
      
      # Redis configuration
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASSWORD}
      
      # MongoDB configuration (optional - uncomment if needed)
      # - SPRING_DATA_MONGODB_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/${MONGO_INITDB_DATABASE}?authSource=admin
      
      # Kafka configuration (optional - uncomment if needed)
      # - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      
      # Elasticsearch configuration (optional - uncomment if needed)
      # - SPRING_ELASTICSEARCH_URIS=http://elasticsearch:9200
      # - SPRING_ELASTICSEARCH_USERNAME=elastic
      # - SPRING_ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      
      # Application configuration
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - SERVER_PORT=${APP_PORT}
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics
      
      # Disable problematic features for startup
      - SPRING_FLYWAY_ENABLED=false
      - SPRING_CLOUD_COMPATIBILITY_VERIFIER_ENABLED=false
      - spring.cloud.compatibility-verifier.enabled=false
      
      # Development features
      - SPRING_DEVTOOLS_RESTART_ENABLED=true
      - LOGGING_LEVEL_COM_WELCOMER=DEBUG
      - LOGGING_LEVEL_ROOT=INFO
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=true
      - SPRING_JPA_FORMAT_SQL=true
      
      # JVM options and Spring config location
      - JAVA_OPTS=-Xmx1024m -Xms512m -XX:+UseG1GC
      - SPRING_CONFIG_LOCATION=classpath:/application.properties,file:/app/config/application.properties
    ports:
      - "${APP_PORT}:${APP_PORT}"
      - "5005:5005"  # Debug port
      - "9090:9090"  # gRPC port
    networks:
      - welcomer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${APP_PORT}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Development and Management Services
  
  # Kafka UI for easier Kafka management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: welcomer-kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: welcomer-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    ports:
      - "8090:8080"
    networks:
      - welcomer-network
    restart: unless-stopped

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: welcomer-redis-commander
    depends_on:
      - redis
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD}
    ports:
      - "8081:8081"
    networks:
      - welcomer-network
    restart: unless-stopped

  # phpMyAdmin for MySQL management
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: welcomer-phpmyadmin
    depends_on:
      - mysql
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: ${MYSQL_USER}
      PMA_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "8082:80"
    networks:
      - welcomer-network
    restart: unless-stopped

  # Mongo Express for MongoDB management
  mongo-express:
    image: mongo-express:latest
    container_name: welcomer-mongo-express
    depends_on:
      - mongodb
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: devpassword
    ports:
      - "8083:8081"
    networks:
      - welcomer-network
    restart: unless-stopped

# Network configuration
networks:
  welcomer-network:
    driver: bridge
    name: welcomer-network

# Volume configuration
volumes:
  mysql-data:
    name: welcomer-mysql-data
  mongodb-data:
    name: welcomer-mongodb-data
  redis-data:
    name: welcomer-redis-data
  zookeeper-data:
    name: welcomer-zookeeper-data
  zookeeper-logs:
    name: welcomer-zookeeper-logs
  kafka-data:
    name: welcomer-kafka-data
  elasticsearch-data:
    name: welcomer-elasticsearch-data